// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id
  userType          USERTYPE           @default(USER)
  name              String
  lastname          String
  email             String             @unique
  password          String
  userRestaurant    Restaurant?        @relation(fields: [idRestaurant], references: [id])
  idRestaurant      Int?
  state             Boolean
  TableReservation  TableReservation[] @relation(name: "user")
  TableReservations TableReservation[] @relation(name: "waiter")

  OrderU Orden[] @relation(name: "user")
  OrderW Orden[] @relation(name: "waiter")
}

model TableReservation {
  tableReservationRestaurantTable RestaurantTable @relation(fields: [idRestaurantTable], references: [id])
  idRestaurantTable               Int             @id
  tableReservationUser            User?           @relation(name: "user", fields: [idUser], references: [id], onDelete: SetNull)
  idUser                          Int?
  reservationDate                 DateTime
  tableReservationUserWaiter      User?           @relation(name: "waiter", fields: [idWaiter], references: [id], onDelete: SetNull)
  idWaiter                        Int?
}

model RestaurantTable {
  id                        Int                @id @default(autoincrement())
  code                      String
  capacity                  Int
  state                     TABLESTATE
  restaurantRestaurantTable Restaurant         @relation(fields: [idRestaurant], references: [id])
  idRestaurant              Int
  Order                     Orden[]
  TableReservation          TableReservation[]
}

model Restaurant {
  id              Int               @id
  name            String
  ubication       String
  phoneNumber     String
  cantidad        Int
  Order           Orden[]
  User            User[]
  RestaurantTable RestaurantTable[]
  products        Product[]
  Cupon           Cupon[]
}

model Orden {
  id                  Int              @id @default(autoincrement())
  date                DateTime         @default(now())
  subTotal            Float
  iva                 Float
  clientPaymentInCash Float
  clientPaymentInCard Float
  orderTotal          Float
  orderUser           User?             @relation(name: "user", fields: [idUser], references: [id], onDelete: SetNull)
  idUser              Int?
  orderWaiter         User?            @relation(name: "waiter", fields: [idWaiter], references: [id], onDelete: SetNull)
  idWaiter            Int?
  orderRestaurant     Restaurant       @relation(fields: [idRestaurant], references: [id])
  idRestaurant        Int
  orderTable          RestaurantTable? @relation(fields: [idTable], references: [id])
  idTable             Int?
  state               ORDERSTATE
  paymentOption       PAYMENTTYPE
  OrderDetail         OrderDetail[]
}

model OrderDetail {
  id                 Int     @id @default(autoincrement())
  OrderDetailOrder   Orden?  @relation(fields: [idOrder], references: [id])
  idOrder            Int?
  OrderDetailProduct Product @relation(fields: [idProduct], references: [id])
  idProduct          Int
  quantity           Int
  total              Float
  note               String?
  Cupon              Cupon?  @relation(fields: [cuponId], references: [id])
  cuponId            Int?
}

model Product {
  id                         Int             @id @default(autoincrement())
  name                       String
  description                String
  ingredients                String
  price                      Float
  productToRestaurantProduct ProductCategory @relation(fields: [idCategory], references: [id])
  idCategory                 Int
  state                      Boolean
  OrderDetail                OrderDetail[]
  restaurants                Restaurant[]
}

model ProductCategory {
  id          Int       @id
  description String
  Product     Product[]
}

model Cupon {
  id              Int           @id @default(autoincrement())
  nombre          String
  descuento       Float
  CuponRestaurant Restaurant    @relation(fields: [idRestaurant], references: [id])
  idRestaurant    Int
  OrderDetail     OrderDetail[]
  // cuponTotal      Float
  // subTotal        Float
  // iva             Float
}

enum TABLESTATE {
  FREE
  NOTFREE
  INACTIVE
}

enum USERTYPE {
  ADMIN
  USER
  WAITER
}

enum ORDERSTATE {
  REGISTERED
  DELIVERED
  TOPAY
}

enum PAYMENTTYPE {
  CASH
  CARD
  BOTH
}
